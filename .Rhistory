GeneroEspecie) %>%          #Group by Ano, Zonificacion, Transect, and GenusSpeices
summarize(B = sum(W))                    #Create a sum of weight by species
} else {                                 #If a species is selected
B <- data %>%                             #Set B equals to data
filter(Comunidad == location) %>%               #Filter by side
filter(GeneroEspecie == species) %>%   #Filter by species
group_by(Ano,
Zonificacion,
Transecto,
GeneroEspecie) %>%         #Group by year, zone, transect number, and species
summarize(B = sum(W))                   #Create a sum of the weight for selected species
}
return(B)                               #Return B
}
B = fish_biomass(data = data, location = "Bahia de Kino")
function(data, ab = NULL, location, species = NULL){
library(dplyr)   #Load dplyr package
library(tidyr)   #Load tidyr package
library(reshape) #Load reshape package
#If no ab database is passed, checks to see if the data passed has it within the columns or loads default ab database
if(is.null(ab) & any(colnames(data) == "a")){
ab <- ab
} else {
ab <- data(abtl)       #Load the database of allometric  growth parameters and trophic level
print(1)
data <- data %>% #Untable the data based on Abundance (one line per organism)
left_join(ab, by = "GeneroEspecie")
}
if(!is.null(ab)){
data <- data %>% #Untable the data based on Abundance (one line per organism)
left_join(ab, by = "GeneroEspecie")
}
data <- data %>%   #Join data with the database that has a and b parameters
mutate(W = Abundancia*a*(Talla^b))                 #Create Weight variable
if(is.null(species)){ #If a single species is not targeted, calculates biomass for all species
B <- data %>% #Set b equals to data
filter(Comunidad == location) %>%                #Filter by location
group_by(Ano,
Zonificacion,
Transecto,
GeneroEspecie) %>%          #Group by Ano, Zonificacion, Transect, and GenusSpeices
summarize(B = sum(W))                    #Create a sum of weight by species
} else {                                 #If a species is selected
B <- data %>%                             #Set B equals to data
filter(Comunidad == location) %>%               #Filter by side
filter(GeneroEspecie == species) %>%   #Filter by species
group_by(Ano,
Zonificacion,
Transecto,
GeneroEspecie) %>%         #Group by year, zone, transect number, and species
summarize(B = sum(W))                   #Create a sum of the weight for selected species
}
return(B)                               #Return B
}
B = fish_biomass(data = data, location = "Bahia de Kino")
B = fish_biomass(data = data, location = "Bahia de Kino")
B = fish_biomass(data = data, location = "Bahia de Kino")
B = fish_biomass(data = data, location = "Bahia de Kino")
colnames(data)
B = fish_biomass(data = data, location = "Bahia de Kino")
if(is.null(ab) & any(colnames(data) == "a")){
ab <- ab
} else {
ab <- data(abtl)       #Load the database of allometric  growth parameters and trophic level
print(1)
data <- data %>% #Untable the data based on Abundance (one line per organism)
left_join(ab, by = "GeneroEspecie")
}
ab = NULL
species = NULL
species
if(is.null(ab) & any(colnames(data) == "a")){
ab <- ab
} else {
ab <- data(abtl)       #Load the database of allometric  growth parameters and trophic level
print(1)
data <- data %>% #Untable the data based on Abundance (one line per organism)
left_join(ab, by = "GeneroEspecie")
}
ab
if(!is.null(ab)){
data <- data %>% #Untable the data based on Abundance (one line per organism)
left_join(ab, by = "GeneroEspecie")
}
data <- data %>%   #Join data with the database that has a and b parameters
mutate(W = Abundancia*a*(Talla^b))                 #Create Weight variable
if(is.null(species)){ #If a single species is not targeted, calculates biomass for all species
B <- data %>% #Set b equals to data
filter(Comunidad == location) %>%                #Filter by location
group_by(Ano,
Zonificacion,
Transecto,
GeneroEspecie) %>%          #Group by Ano, Zonificacion, Transect, and GenusSpeices
summarize(B = sum(W))                    #Create a sum of weight by species
} else {                                 #If a species is selected
B <- data %>%                             #Set B equals to data
filter(Comunidad == location) %>%               #Filter by side
filter(GeneroEspecie == species) %>%   #Filter by species
group_by(Ano,
Zonificacion,
Transecto,
GeneroEspecie) %>%         #Group by year, zone, transect number, and species
summarize(B = sum(W))                   #Create a sum of the weight for selected species
}
if(is.null(species)){ #If a single species is not targeted, calculates biomass for all species
B <- data %>% #Set b equals to data
filter(Comunidad == location) %>%                #Filter by location
group_by(Ano,
Zonificacion,
Transecto,
GeneroEspecie) %>%          #Group by Ano, Zonificacion, Transect, and GenusSpeices
summarize(B = sum(W))                    #Create a sum of weight by species
}
location == "Bahia de Kino"
location = "Bahia de Kino"
if(is.null(species)){ #If a single species is not targeted, calculates biomass for all species
B <- data %>% #Set b equals to data
filter(Comunidad == location) %>%                #Filter by location
group_by(Ano,
Zonificacion,
Transecto,
GeneroEspecie) %>%          #Group by Ano, Zonificacion, Transect, and GenusSpeices
summarize(B = sum(W))                    #Create a sum of weight by species
}
View(B)
function(data, ab = NULL, location, species = NULL){
library(dplyr)   #Load dplyr package
library(tidyr)   #Load tidyr package
#If no ab database is passed, checks to see if the data passed has it within the columns or loads default ab database
if(is.null(ab) & any(colnames(data) == "a")){
ab <- ab
} else {
ab <- data(abtl)       #Load the database of allometric  growth parameters and trophic level
print(1)
data <- data %>% #Untable the data based on Abundance (one line per organism)
left_join(ab, by = "GeneroEspecie")
}
if(!is.null(ab)){
data <- data %>% #Untable the data based on Abundance (one line per organism)
left_join(ab, by = "GeneroEspecie")
}
data <- data %>%   #Join data with the database that has a and b parameters
mutate(W = Abundancia*a*(Talla^b))                 #Create Weight variable
if(is.null(species)){ #If a single species is not targeted, calculates biomass for all species
B <- data %>% #Set b equals to data
filter(Comunidad == location) %>%                #Filter by location
group_by(Ano,
Zonificacion,
Transecto,
GeneroEspecie) %>%          #Group by Ano, Zonificacion, Transect, and GenusSpeices
summarize(B = sum(W))                    #Create a sum of weight by species
} else {                                 #If a species is selected
B <- data %>%                             #Set B equals to data
filter(Comunidad == location) %>%               #Filter by side
filter(GeneroEspecie == species) %>%   #Filter by species
group_by(Ano,
Zonificacion,
Transecto,
GeneroEspecie) %>%         #Group by year, zone, transect number, and species
summarize(B = sum(W))                   #Create a sum of the weight for selected species
}
return(B)                               #Return B
}
B = fish_biomass(data = data, location = "Bahia de Kino", ab = NULL, species = NULL)
rm(fish_biomass)
function(data, ab = NULL, location, species = NULL){
library(dplyr)   #Load dplyr package
library(tidyr)   #Load tidyr package
#If no ab database is passed, checks to see if the data passed has it within the columns or loads default ab database
if(is.null(ab) & any(colnames(data) == "a")){
ab <- ab
} else {
ab <- data(abtl)       #Load the database of allometric  growth parameters and trophic level
print(1)
data <- data %>% #Untable the data based on Abundance (one line per organism)
left_join(ab, by = "GeneroEspecie")
}
if(!is.null(ab)){
data <- data %>% #Untable the data based on Abundance (one line per organism)
left_join(ab, by = "GeneroEspecie")
}
data <- data %>%   #Join data with the database that has a and b parameters
mutate(W = Abundancia*a*(Talla^b))                 #Create Weight variable
if(is.null(species)){ #If a single species is not targeted, calculates biomass for all species
B <- data %>% #Set b equals to data
filter(Comunidad == location) %>%                #Filter by location
group_by(Ano,
Zonificacion,
Transecto,
GeneroEspecie) %>%          #Group by Ano, Zonificacion, Transect, and GenusSpeices
summarize(B = sum(W))                    #Create a sum of weight by species
} else {                                 #If a species is selected
B <- data %>%                             #Set B equals to data
filter(Comunidad == location) %>%               #Filter by side
filter(GeneroEspecie == species) %>%   #Filter by species
group_by(Ano,
Zonificacion,
Transecto,
GeneroEspecie) %>%         #Group by year, zone, transect number, and species
summarize(B = sum(W))                   #Create a sum of the weight for selected species
}
return(B)                               #Return B
}
B = fish_biomass(data = data, location = "Bahia de Kino", ab = NULL, species = NULL)
source('~/.active-rstudio-document', echo=TRUE)
B = fish_biomass(data = data, location = "Bahia de Kino", ab = NULL, species = NULL)
fish_biomass <- function(data, ab = NULL, location, species = NULL){
library(dplyr)   #Load dplyr package
library(tidyr)   #Load tidyr package
#If no ab database is passed, checks to see if the data passed has it within the columns or loads default ab database
if(is.null(ab) & any(colnames(data) == "a")){
ab <- ab
} else {
ab <- data(abtl)       #Load the database of allometric  growth parameters and trophic level
print(1)
data <- data %>% #Untable the data based on Abundance (one line per organism)
left_join(ab, by = "GeneroEspecie")
}
if(!is.null(ab)){
data <- data %>% #Untable the data based on Abundance (one line per organism)
left_join(ab, by = "GeneroEspecie")
}
data <- data %>%   #Join data with the database that has a and b parameters
mutate(W = Abundancia*a*(Talla^b))                 #Create Weight variable
if(is.null(species)){ #If a single species is not targeted, calculates biomass for all species
B <- data %>% #Set b equals to data
filter(Comunidad == location) %>%                #Filter by location
group_by(Ano,
Zonificacion,
Transecto,
GeneroEspecie) %>%          #Group by Ano, Zonificacion, Transect, and GenusSpeices
summarize(B = sum(W))                    #Create a sum of weight by species
} else {                                 #If a species is selected
B <- data %>%                             #Set B equals to data
filter(Comunidad == location) %>%               #Filter by side
filter(GeneroEspecie == species) %>%   #Filter by species
group_by(Ano,
Zonificacion,
Transecto,
GeneroEspecie) %>%         #Group by year, zone, transect number, and species
summarize(B = sum(W))                   #Create a sum of the weight for selected species
}
return(B)                               #Return B
}
B = fish_biomass(data = data, location = "Bahia de Kino", ab = NULL, species = NULL)
View(B)
data <- datos
B = fish_biomass(data = data, location = "Bahia de Kino", ab = NULL, species = NULL)
B = fish_biomass(data = data, location = "Bahia de Kino", ab = NULL, species = "Mycteroperca prionura")
B = fish_biomass(data = data, location = "Bahia de Kino", ab = NULL, species = "Mycteroperca rosacea")
abnt
B = fish_biomass(data = data, location = "Bahia de Kino", ab = NULL, species = "Mycteroperca prionura")
unique(B$B)
B = fish_biomass(data = data, location = "Bahia de Kino", ab = NULL, species = "Mycteroperca jordani")
sum(datos$GeneroEspecie == "Mycteroperca prionura")
sum(datos$GeneroEspecie[datos$Abundancia>0] == "Mycteroperca prionura")
sum(B$B)
sum(B$B, na.rm = T)
pri <- subset(datos[datos$Abundancia>0], GeneroEspecie == "Mycteroperca prionura")
pri <- subset(datos[datos$Abundancia>0,], GeneroEspecie == "Mycteroperca prionura")
View(pri)
fish_biomass <- function(data, ab = NULL, location, species = NULL){
library(dplyr)   #Load dplyr package
library(tidyr)   #Load tidyr package
#If no ab database is passed, checks to see if the data passed has it within the columns or loads default ab database
if(is.null(ab) & any(colnames(data) == "a")){
ab <- ab
} else {
ab <- data(abtl)       #Load the database of allometric  growth parameters and trophic level
print(1)
data <- data %>% #Untable the data based on Abundance (one line per organism)
left_join(ab, by = "GeneroEspecie")
}
if(!is.null(ab)){
data <- data %>% #Untable the data based on Abundance (one line per organism)
left_join(ab, by = "GeneroEspecie")
}
data <- data %>%   #Join data with the database that has a and b parameters
mutate(W = Abundancia*a*(Talla^b))                 #Create Weight variable
if(is.null(species)){ #If a single species is not targeted, calculates biomass for all species
B <- data %>% #Set b equals to data
filter(Comunidad == location) %>%                #Filter by location
group_by(Ano,
Zonificacion,
Transecto,
GeneroEspecie) %>%          #Group by Ano, Zonificacion, Transect, and GenusSpeices
summarize(B = sum(W, na.rm = T))                    #Create a sum of weight by species
} else {                                 #If a species is selected
B <- data %>%                             #Set B equals to data
filter(Comunidad == location) %>%               #Filter by side
filter(GeneroEspecie == species) %>%   #Filter by species
group_by(Ano,
Zonificacion,
Transecto,
GeneroEspecie) %>%         #Group by year, zone, transect number, and species
summarize(B = sum(W, na.rm = T))                   #Create a sum of the weight for selected species
}
return(B)                               #Return B
}
B = fish_biomass(data = data, location = "Bahia de Kino", ab = NULL, species = "Mycteroperca jordani")
B = fish_biomass(data = data, location = "Bahia de Kino", ab = NULL, species = "Mycteroperca prionura")
View(B)
fish_biomass <- function(data, ab = NULL, location, species = NULL){
library(dplyr)   #Load dplyr package
library(tidyr)   #Load tidyr package
#If no ab database is passed, checks to see if the data passed has it within the columns or loads default ab database
if(is.null(ab) & any(colnames(data) == "a")){
ab <- ab
} else {
ab <- data(abtl)       #Load the database of allometric  growth parameters and trophic level
print(1)
data <- data %>% #Untable the data based on Abundance (one line per organism)
left_join(ab, by = "GeneroEspecie")
}
if(!is.null(ab)){
data <- data %>% #Untable the data based on Abundance (one line per organism)
left_join(ab, by = "GeneroEspecie")
}
data <- data %>%   #Join data with the database that has a and b parameters
mutate(W = Abundancia*a*(Talla^b))                 #Create Weight variable
if(is.null(species)){ #If a single species is not targeted, calculates biomass for all species
B <- data %>% #Set b equals to data
filter(Comunidad == location) %>%                #Filter by location
group_by(Ano,
Zonificacion,
Transecto,
GeneroEspecie) %>%          #Group by Ano, Zonificacion, Transect, and GenusSpeices
summarize(B = sum(W, na.rm = T))                    #Create a sum of weight by species
} else {                                 #If a species is selected
B <- data %>%                             #Set B equals to data
filter(Comunidad == location) %>%               #Filter by side
filter(GeneroEspecie == species) %>%   #Filter by species
group_by(Ano,
Zonificacion,
Transecto,
GeneroEspecie) %>%         #Group by year, zone, transect number, and species
summarize(B = sum(W, na.rm = T))                   #Create a sum of the weight for selected species
}
return(B)                               #Return B
}
mpa_plot2 <- function(data, type){
library(ggplot2)
if (type == "s"){
p <- ggplot(data, aes(x = Ano, y = S, color = Zonificacion))+
geom_point()+
stat_summary(fun.y = "mean", geom = "line")+
theme_bw()+
scale_color_brewer(palette = "Set1")
}
if (type == "d"){
p <- ggplot(data, aes(x = Ano, y = D, color = Zonificacion, factor = GeneroEspecie))+
geom_point()+
stat_summary(fun.y = "mean", geom = "line")+
theme_bw()+
scale_color_brewer(palette = "Set1")
}
if (type == "t"){
p <- ggplot(data, aes(x = Ano, y = mean, color = Zonificacion))+
geom_point()+
stat_summary(fun.y = "mean", geom = "line")+
theme_bw()+
scale_color_brewer(palette = "Set1")
}
if (type == "b"){
p <- ggplot(data, aes(x = Ano, y = B, color = Zonificacion))+
geom_point()+
stat_summary(fun.y = "mean", geom = "line")+
theme_bw()+
scale_color_brewer(palette = "Set1")
}
if (type == "l"){
p <- ggplot(data, aes(x = Ano, y = stat, color = Zonificacion))+
geom_point()+
stat_summary(fun.y = "mean", geom = "line")+
theme_bw()+
scale_color_brewer(palette = "Set1")
}
p
}
B = fish_biomass(data = data, location = "Bahia de Kino")
mpa_plot2(B, "b")
mpa_plot2(N, "d")
fish_biomass <- function(data, ab = NULL, location, species = NULL){
library(dplyr)   #Load dplyr package
library(tidyr)   #Load tidyr package
#If no ab database is passed, checks to see if the data passed has it within the columns or loads default ab database
if(is.null(ab) & any(colnames(data) == "a")){
ab <- ab
} else {
ab <- data(abtl)       #Load the database of allometric  growth parameters and trophic level
print(1)
data <- data %>% #Untable the data based on Abundance (one line per organism)
left_join(ab, by = "GeneroEspecie")
}
if(!is.null(ab)){
data <- data %>% #Untable the data based on Abundance (one line per organism)
left_join(ab, by = "GeneroEspecie")
}
data <- data %>%   #Join data with the database that has a and b parameters
mutate(W = Abundancia*a*(Talla^b))                 #Create Weight variable
if(is.null(species)){ #If a single species is not targeted, calculates biomass for all species
B <- data %>% #Set b equals to data
filter(Comunidad == location) %>%                #Filter by location
group_by(Ano,
Zonificacion,
Transecto,
GeneroEspecie) %>%          #Group by Ano, Zonificacion, Transect, and GenusSpeices
summarize(B = sum(W, na.rm = T))                    #Create a sum of weight by species
} else {                                 #If a species is selected
B <- data %>%                             #Set B equals to data
filter(Comunidad == location) %>%               #Filter by side
filter(GeneroEspecie == species) %>%   #Filter by species
group_by(Ano,
Zonificacion,
Transecto,
GeneroEspecie) %>%         #Group by year, zone, transect number, and species
summarize(B = sum(W, na.rm = T))                   #Create a sum of the weight for selected species
}
return(B)                               #Return B
}
mpa_plot2 <- function(data, type){
library(ggplot2)
if (type == "s"){
p <- ggplot(data, aes(x = Ano, y = S, color = Zonificacion))+
geom_point()+
stat_summary(fun.y = "mean", geom = "line")+
theme_bw()+
scale_color_brewer(palette = "Set1")
}
if (type == "d"){
p <- ggplot(data, aes(x = Ano, y = D, color = Zonificacion))+
geom_point()+
stat_summary(fun.y = "mean", geom = "line")+
theme_bw()+
scale_color_brewer(palette = "Set1")
}
if (type == "t"){
p <- ggplot(data, aes(x = Ano, y = mean, color = Zonificacion))+
geom_point()+
stat_summary(fun.y = "mean", geom = "line")+
theme_bw()+
scale_color_brewer(palette = "Set1")
}
if (type == "b"){
p <- ggplot(data, aes(x = Ano, y = B, color = Zonificacion))+
geom_point()+
stat_summary(fun.y = "mean", geom = "line")+
theme_bw()+
scale_color_brewer(palette = "Set1")
}
if (type == "l"){
p <- ggplot(data, aes(x = Ano, y = stat, color = Zonificacion))+
geom_point()+
stat_summary(fun.y = "mean", geom = "line")+
theme_bw()+
scale_color_brewer(palette = "Set1")
}
p
}
mpa_plot2(N, "d")
data = N
ggplot(data, aes(x = Ano, y = D, color = Zonificacion))+
geom_point()+
stat_summary(fun.y = "mean", geom = "line")+
theme_bw()+
scale_color_brewer(palette = "Set1")
# Gráfica de densidad promedio
N <- datos %>%
group_by(Ano, Zonificacion, Sitio, Transecto) %>%
summarize(N1=sum(Abundancia)) %>%
group_by(Ano, Zonificacion) %>%
summarize(N = mean(N1), NDS = sd(N1))
ggplot(data = N, aes(x = Ano, y = N, col = Zonificacion))+
geom_line()+
geom_point()+
geom_errorbar(aes(ymin=N-NDS,ymax=N+NDS), width = 0.2)+
theme_bw()+
labs(x="Año", y="Densidad (org / transecto)")+
scale_color_brewer(palette = "Set1")+
removeGrid()
N <- datos %>%
group_by(Ano, Zonificacion, Sitio, Transecto) %>%
summarize(N1=sum(Abundancia)) %>%
group_by(Ano, Zonificacion) %>%
summarize(N = mean(N1), NDS = sd(N1))
ggplot(data = N, aes(x = Ano, y = N, col = Zonificacion))+
geom_line()+
geom_point()+
geom_errorbar(aes(ymin=N-NDS,ymax=N+NDS), width = 0.2)+
theme_bw()+
labs(x="Año", y="Densidad (org / transecto)")+
scale_color_brewer(palette = "Set1")
N <- density(data = datos, location = "Bahia de Kino")
library(MPAtools)
N <- density(data = datos, location = "Bahia de Kino")
N = N%>%
group_by(Ano, Zonificacion) %>%
summarize(N = mean(N1), NDS = sd(N1))
colnames(N)
N = N%>%
group_by(Ano, Zonificacion) %>%
summarize(N = mean(D), NDS = sd(D))
mpa_plot2(N, "d")
N
ggplot(data, aes(x = Ano, y = D, color = Zonificacion))+
geom_point()
data = N
ggplot(data, aes(x = Ano, y = D, color = Zonificacion))+
geom_point()
N
ggplot(data, aes(x = Ano, y = N, color = Zonificacion))+
geom_point()
